// -*- C++ -*-
//
// Package:    TrackAnalysis/HitAnalyzer
// Class:      HitAnalyzer
//
/**\class HitAnalyzer HitAnalyzer.cc TrackAnalysis/HitAnalyzer/plugins/HitAnalyzer.cc

 Description: [one line class summary]

 Implementation:
     [Notes on implementation]
*/
//
// Original Author:  Michail Bachtis
//         Created:  Mon, 21 Mar 2016 14:17:37 GMT
//
//

// system include files
#include <memory>

// user include files
#include "FWCore/Framework/interface/Frameworkfwd.h"
#include "FWCore/Framework/interface/EDAnalyzer.h"

#include "FWCore/Framework/interface/Event.h"
#include "FWCore/Framework/interface/ESHandle.h"
#include "FWCore/Framework/interface/MakerMacros.h"
#include "DataFormats/TrackReco/interface/TrackFwd.h"
#include "DataFormats/TrackReco/interface/Track.h"
#include "DataFormats/TrackingRecHit/interface/TrackingRecHit.h"
#include "DataFormats/TrackingRecHit/interface/TrackingRecHitFwd.h"
#include "DataFormats/SiStripDetId/interface/SiStripDetId.h"
#include "TrackingTools/PatternTools/interface/Trajectory.h"
#include "FWCore/ParameterSet/interface/ParameterSet.h"

#include "Geometry/CommonDetUnit/interface/GlobalTrackingGeometry.h"
#include "Geometry/Records/interface/GlobalTrackingGeometryRecord.h"
#include "DataFormats/SiPixelDetId/interface/PXFDetId.h"
#include "DataFormats/SiPixelDetId/interface/PXBDetId.h"
#include "DataFormats/SiStripDetId/interface/TIDDetId.h"
#include "DataFormats/SiStripDetId/interface/TIBDetId.h"
#include "DataFormats/SiStripDetId/interface/TOBDetId.h"
#include "DataFormats/SiStripDetId/interface/TECDetId.h"
#include "DataFormats/GeometryCommonDetAlgo/interface/MeasurementPoint.h"
#include "DataFormats/HepMCCandidate/interface/GenParticle.h"
#include "Geometry/CommonTopologies/interface/StripTopology.h"
#include "Geometry/CommonTopologies/interface/TkRadialStripTopology.h"
#include "DataFormats/Math/interface/approx_log.h"
#include "DataFormats/Math/interface/ProjectMatrix.h"
#include "​DataFormats/​Math/​interface/​AlgebraicROOTObjects.h"

#include "TFile.h"
#include "TTree.h"
#include "functions.h"

                                 //
                                 // class declaration
                                 //

                                 class HitAnalyzer : public edm::EDAnalyzer
{
public:
  explicit HitAnalyzer(const edm::ParameterSet &);
  ~HitAnalyzer();

  static void fillDescriptions(edm::ConfigurationDescriptions &descriptions);

private:
  virtual void beginJob() override;
  virtual void analyze(const edm::Event &, const edm::EventSetup &) override;
  virtual void endJob() override;

  //virtual void beginRun(edm::Run const&, edm::EventSetup const&) override;
  //virtual void endRun(edm::Run const&, edm::EventSetup const&) override;
  //virtual void beginLuminosityBlock(edm::LuminosityBlock const&, edm::EventSetup const&) override;
  //virtual void endLuminosityBlock(edm::LuminosityBlock const&, edm::EventSetup const&) override;

  // ----------member data ---------------------------
  //  edm::EDGetTokenT<reco::TrackCollection>      inputTracks_;
  edm::EDGetTokenT<std::vector<Trajectory>> inputTraj_;
  edm::EDGetTokenT<std::vector<reco::GenParticle>> GenParticlesToken_;

  TFile *fout;
  TTree *tree;

  const int N = 25;

  int n;
  float *z;
  float *eta;
  float *phi;
  float *r;

  float *xUnc;
  float *yUnc;
  float *zUnc;
  float *etaUnc;
  float *phiUnc;
  float *rUnc;

  float *pt;

  int *detector;
  int *stereo;
  int *glued;
  int *layer;

  //local positions and errors
  float *localx;
  float *localy; 
  float *localz;
  float *localxErr;
  float *localyErr;
  float *localxyErr;

  //material stuff
  float *MSErr;
  float *local2helix;

  float trackEta;
  float trackPhi;
  float trackPt;
  float trackPtErr;
  float trackZ0;
  float trackX0;
  float trackY0;
  float trackCharge;

  float genPt;
  float genCharge;
};

//
// constants, enums and typedefs
//

//
// static data member definitions
//

//
// constructors and destructor
//
HitAnalyzer::HitAnalyzer(const edm::ParameterSet &iConfig)

{
  //now do what ever initialization is needed
  //  inputTracks_ = consumes<reco::TrackCollection>(edm::InputTag("TrackRefitter"));
  inputTraj_ = consumes<std::vector<Trajectory>>(edm::InputTag("TrackRefitter"));
  GenParticlesToken_ = consumes<std::vector<reco::GenParticle>>(edm::InputTag("genParticles"));

  n = 0;

  z = new float[N];
  eta = new float[N];
  phi = new float[N];
  r = new float[N];
  pt = new float[N];

  xUnc = new float[N];
  yUnc = new float[N];
  zUnc = new float[N];
  etaUnc = new float[N];
  phiUnc = new float[N];
  rUnc = new float[N];

  stereo = new int[N];
  glued = new int[N];
  detector = new int[N];
  layer = new int[N];

  localx = new float[N];
  localy = new float[N];
  localz = new float[N];
  localxErr = new float[N];
  localyErr = new float[N];
  localxyErr = new float[N];

  MSErr = new float[N];
  local2helix = new float[N];

  fout = new TFile("trackTree.root", "RECREATE");
  tree = new TTree("tree", "tree");
  tree->Branch("n", &n, "n/I");

  tree->Branch("z", z, "z[n]/F");
  tree->Branch("eta", eta, "eta[n]/F");
  tree->Branch("phi", phi, "phi[n]/F");
  tree->Branch("r", r, "r[n]/F");
  tree->Branch("pt", pt, "pt[n]/F");

  tree->Branch("xUnc", xUnc, "xUnc[n]/F");
  tree->Branch("yUnc", yUnc, "yUnc[n]/F");
  tree->Branch("zUnc", zUnc, "zUnc[n]/F");
  tree->Branch("etaUnc", etaUnc, "etaUnc[n]/F");
  tree->Branch("phiUnc", phiUnc, "phiUnc[n]/F");
  tree->Branch("rUnc", rUnc, "rUnc[n]/F");

  tree->Branch("stereo", stereo, "stereo[n]/I");
  tree->Branch("glued", stereo, "glued[n]/I");
  tree->Branch("detector", detector, "detector[n]/I");
  tree->Branch("layer", layer, "layer[n]/I");

  tree->Branch("trackPt", &trackPt, "trackPt/F");
  tree->Branch("trackPtErr", &trackPtErr, "trackPtErr/F");
  tree->Branch("trackEta", &trackEta, "trackEta/F");
  tree->Branch("trackPhi", &trackPhi, "trackPhi/F");
  tree->Branch("trackX0", &trackX0, "trackX0/F");
  tree->Branch("trackY0", &trackY0, "trackY0/F");
  tree->Branch("trackZ0", &trackZ0, "trackZ0/F");
  tree->Branch("trackCharge", &trackCharge, "trackCharge/F");

  tree->Branch("genPt", &genPt, "genPt/F");
  tree->Branch("genCharge", &genCharge, "genCharge/F");

  tree->Branch("localx", localx, "localx[n]/F");
  tree->Branch("localy", localy, "localy[n]/F");
  tree->Branch("localz", localz, "localz[n]/F");
  tree->Branch("localxErr", localxErr, "localxErr[n]/F");
  tree->Branch("localyErr", localyErr, "localyErr[n]/F");
  tree->Branch("localxyErr", localxyErr, "localxyErr[n]/F");
  tree->Branch("MSErr", MSErr, "MSErr[n]/F");
  tree->Branch("local2helix", local2helix, "local2helix[n]/F");
}

HitAnalyzer::~HitAnalyzer()
{

  // do anything here that needs to be done at desctruction time
  // (e.g. close files, deallocate resources etc.)
}

//
// member functions
//

// ------------ method called for each event  ------------
void HitAnalyzer::analyze(const edm::Event &iEvent, const edm::EventSetup &iSetup)
{
  using namespace edm;

  Handle<std::vector<reco::GenParticle>> genPartCollection;
  iEvent.getByToken(GenParticlesToken_, genPartCollection);

  auto genParticles = *genPartCollection.product();

  // loop over gen particles

  edm::ESHandle<GlobalTrackingGeometry> globalGeometry;
  iSetup.get<GlobalTrackingGeometryRecord>().get(globalGeometry);

  //   Handle<reco::TrackCollection> trackH;
  // iEvent.getByToken(inputTracks_,trackH);

  Handle<std::vector<Trajectory>> trajH;
  iEvent.getByToken(inputTraj_, trajH);

  //   printf("Number of tracks=%d\n",(int)trackH->size());
  //   for (unsigned int i =0 ; i<trackH->size();++i) {

  for (unsigned int j = 0; j < trajH->size(); ++j)
  {

    //     const reco::Track& track = (*trackH)[i];
    //     if (track.lost()>0)
    //       continue;

    const std::vector<TrajectoryMeasurement> &tms = (*trajH)[j].measurements();

    ////

    if (((*trajH)[j].direction()) == alongMomentum)
    {

      TrajectoryStateOnSurface measurement = (*trajH)[j].firstMeasurement().updatedState();

      trackPt = measurement.globalMomentum().perp();
      //FIX BUG
      trackPtErr = sqrt(measurement.curvilinearError().matrix()[0][0]) * trackPt;

      trackEta = measurement.globalMomentum().eta();
      trackPhi = measurement.globalMomentum().phi();
      trackX0 = measurement.globalPosition().x();
      trackY0 = measurement.globalPosition().y();
      trackZ0 = measurement.globalPosition().z();
      trackCharge = measurement.charge();
    }
    else
    {
      TrajectoryStateOnSurface measurement = (*trajH)[j].lastMeasurement().updatedState();

      trackPt = measurement.globalMomentum().perp();
      trackPtErr = sqrt(measurement.curvilinearError().matrix()[0][0]) * trackPt;
      trackEta = measurement.globalMomentum().eta();
      trackPhi = measurement.globalMomentum().phi();
      trackX0 = measurement.globalPosition().x();
      trackY0 = measurement.globalPosition().y();
      trackZ0 = measurement.globalPosition().z();
      trackCharge = measurement.charge();
    }

    //     printf("First point %f %f %f  - %f %f %f\n",trackX0,trackY0,trackZ0,trackPt,trackEta,trackPhi);

    for (std::vector<reco::GenParticle>::const_iterator g = genParticles.begin(); g != genParticles.end(); ++g)
    {

      float dR = deltaR(g->phi(), trackPhi, g->eta(), trackEta);

      if (dR < 0.15)
      {
        genPt = g->pt();
        genCharge = g->charge();
      }
      else
        continue;
    }

    ////
    n = 0;
    for (unsigned int i = 0; i < tms.size(); ++i)
    {
      TrajectoryStateOnSurface updatedState = tms[i].updatedState();

      if (!updatedState.isValid())
        continue;

      if (!tms[i].recHit()->isValid())
        continue;

      stereo[n] = 0;
      glued[n] = 0;
      pt[n] = updatedState.globalMomentum().perp();

      const GeomDet *detectorG = globalGeometry->idToDet(tms[i].recHit()->geographicalId());
      LocalPoint local(tms[i].recHit()->localPosition().x(), tms[i].recHit()->localPosition().y(), tms[i].recHit()->localPosition().z());

      if (detectorG->subDetector() == GeomDetEnumerators::PixelBarrel)
      {
        PXBDetId detid(tms[i].recHit()->rawId());
        layer[n] = detid.layer();
      }
      else if (detectorG->subDetector() == GeomDetEnumerators::PixelEndcap)
      {
        PXFDetId detid(tms[i].recHit()->rawId());
        layer[n] = -1 * (detid.side() == 1) * detid.disk() + (detid.side() == 2) * detid.disk();
      }
      else if (detectorG->subDetector() == GeomDetEnumerators::TIB)
      {
        TIBDetId detid(tms[i].recHit()->rawId());
        layer[n] = detid.layer();
        if (detid.stereo() != 0)
          stereo[n] = 1;
        if (detid.glued() != 0)
          glued[n] = 1;
        local = LocalPoint(tms[i].recHit()->localPosition().x(), updatedState.localPosition().y(), tms[i].recHit()->localPosition().z());
      }
      else if (detectorG->subDetector() == GeomDetEnumerators::TOB)
      {
        TOBDetId detid(tms[i].recHit()->rawId());
        layer[n] = detid.layer();
        if (detid.stereo() != 0)
          stereo[n] = 1;
        if (detid.glued() != 0)
          glued[n] = 1;

        local = LocalPoint(tms[i].recHit()->localPosition().x(), updatedState.localPosition().y(), tms[i].recHit()->localPosition().z());
      }
      else if (detectorG->subDetector() == GeomDetEnumerators::TID)
      {
        TIDDetId detid(tms[i].recHit()->rawId());
        layer[n] = -1 * (detid.side() == 1) * detid.wheel() + (detid.side() == 2) * detid.wheel();
        if (detid.stereo() != 0)
          stereo[n] = 1;
        if (detid.glued() != 0)
          glued[n] = 1;

        const StripTopology *theTopology = dynamic_cast<const StripTopology *>(&(tms[i].recHit()->detUnit()->topology()));
        MeasurementPoint point = theTopology->measurementPosition(tms[i].recHit()->localPosition());
        MeasurementPoint pointT = theTopology->measurementPosition(updatedState.localPosition());
        MeasurementPoint pointC(point.x(), pointT.y());
        local = theTopology->localPosition(pointC);
      }
      else if (detectorG->subDetector() == GeomDetEnumerators::TEC)
      {
        TECDetId detid(tms[i].recHit()->rawId());
        layer[n] = -1 * (detid.side() == 1) * detid.wheel() + (detid.side() == 2) * detid.wheel();
        if (detid.stereo() != 0)
          stereo[n] = 1;
        if (detid.glued() != 0)
          glued[n] = 1;

        const StripTopology *theTopology = dynamic_cast<const StripTopology *>(&(tms[i].recHit()->detUnit()->topology()));
        MeasurementPoint point = theTopology->measurementPosition(tms[i].recHit()->localPosition());
        MeasurementPoint pointT = theTopology->measurementPosition(updatedState.localPosition());
        MeasurementPoint pointC(point.x(), pointT.y());
        local = theTopology->localPosition(pointC);
      }

      // material info

      // Get surface
      const Surface &surface = updatedState.surface();
      // Now get information on medium
      const MediumProperties &mp = surface.mediumProperties(); // parsed from xml tables

      // copy paste from MultipleScatteringUpdator in the KF track fit
      // Momentum vector
      LocalVector d = updatedState.localMomentum();
      float p2 = d.mag2();
      d *= 1.f / sqrt(p2);
      float xf = 1.f / std::abs(d.z()); // increase of path due to angle of incidence
      // calculate general physics things
      constexpr float amscon = 1.8496e-4; // (13.6MeV)**2
      const float m2 = 0.105658 * 0.105658; // use muon mass
      float e2 = p2 + m2;
      float beta2 = p2 / e2;
      // calculate the multiple scattering angle
      float radLen = mp.radLen() * xf; // effective rad. length
      float sigt2 = 0.;                // sigma(alpha)**2

      // Calculated rms scattering angle squared.
      float fact = 1.f + 0.038f * unsafe_logf<2>(radLen);
      fact *= fact;
      float a = fact / (beta2 * p2);
      sigt2 = amscon * radLen * a;

      float isl2 = 1.f / d.perp2();
      float cl2 = (d.z() * d.z());
      float cf2 = (d.x() * d.x()) * isl2;
      float sf2 = (d.y() * d.y()) * isl2;
      // Create update (transformation of independant variations
      //   on angle in orthogonal planes to local parameters.
      float den = 1.f / (cl2 * cl2);

      MSErr[n] = (den * sigt2) * (sf2 * cl2 + cf2);

      AlgebraicROOTObject<1, 5> &&H = asSMatrix<1, 5>(hit.projectionMatrix());
      projFunc<1>().fromH(H);

      std::cout<< H[0][0] << " transf matrix " <<std::endl;

      detector[n] = detectorG->subDetector();
      GlobalPoint corrected = detectorG->toGlobal(local);
      z[n] = corrected.z();
      eta[n] = corrected.eta();
      phi[n] = corrected.phi();
      r[n] = corrected.perp();

      xUnc[n] = tms[i].recHit()->globalPosition().x();
      yUnc[n] = tms[i].recHit()->globalPosition().y();
      zUnc[n] = tms[i].recHit()->globalPosition().z();
      etaUnc[n] = tms[i].recHit()->globalPosition().eta();
      phiUnc[n] = tms[i].recHit()->globalPosition().phi();
      rUnc[n] = tms[i].recHit()->globalPosition().perp();

      localx[n] = tms[i].recHit()->localPosition().x();
      localy[n] = tms[i].recHit()->localPosition().y();
      localz[n] = tms[i].recHit()->localPosition().z();

      localxErr[n] = tms[i].recHit()->localPositionError().xx();
      localyErr[n] = tms[i].recHit()->localPositionError().yy();
      localxyErr[n] = tms[i].recHit()->localPositionError().xy();

      n = n + 1;
    }
    tree->Fill();
  }
}

// ------------ method called once each job just before starting event loop  ------------
void HitAnalyzer::beginJob()
{
}

// ------------ method called once each job just after ending the event loop  ------------
void HitAnalyzer::endJob()
{
  fout->cd();
  fout->Write();
  fout->Close();
}

// ------------ method called when starting to processes a run  ------------
/*
void 
HitAnalyzer::beginRun(edm::Run const&, edm::EventSetup const&)
{
}
*/

// ------------ method called when ending the processing of a run  ------------
/*
void 
HitAnalyzer::endRun(edm::Run const&, edm::EventSetup const&)
{
}
*/

// ------------ method called when starting to processes a luminosity block  ------------
/*
void 
HitAnalyzer::beginLuminosityBlock(edm::LuminosityBlock const&, edm::EventSetup const&)
{
}
*/

// ------------ method called when ending the processing of a luminosity block  ------------
/*
void 
HitAnalyzer::endLuminosityBlock(edm::LuminosityBlock const&, edm::EventSetup const&)
{
}
*/

// ------------ method fills 'descriptions' with the allowed parameters for the module  ------------
void HitAnalyzer::fillDescriptions(edm::ConfigurationDescriptions &descriptions)
{
  //The following says we do not know what parameters are allowed so do no validation
  // Please change this to state exactly what you do use, even if it is no parameters
  edm::ParameterSetDescription desc;
  desc.setUnknown();
  descriptions.addDefault(desc);
}

//define this as a plug-in
DEFINE_FWK_MODULE(HitAnalyzer);
